---
name: "Automatic terraform plan on PR"

on:
  pull_request:
    branches:
    - main

jobs:
  terraform-plan:
    name: "terraform plan"
    runs-on: ubuntu-latest
    steps:

    - name: Checkout the repository
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Run terraform fmt -check
      id: fmt
      run: terraform fmt -check

    - name: Run terraform init
      id: init
      run: terraform init
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_ACTION_WORKING_DIR: '.'
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
    
    - name: Run terraform validate
      id: validate
      run: terraform validate

    - name: Run terraform plan
      id: plan
      run: terraform plan -input=false
      continue-on-error: true # This is in order to continue even if there is an error so we can get the output
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_ACTION_WORKING_DIR: '.'
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Add a comment to the PR with the result of the previous steps
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        VALIDATE: "terraform\n${{ steps.validate.outputs.stdout }}"
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform format and style:\`${{ steps.fmt.outcome }}\`
          #### Terraform initialization: \`${{ steps.init.outcome }}\`
          #### Terraform validation: \`${{ steps.validate.outcome }}\`
          <details><summary>Show validation output</summary>
          
          \`\`\`\n
          ${process.env.VALIDATE}
          \`\`\`
          
          </details>
          
          #### Terraform plan: `${{ steps.plan.outcome }}\`
          <details><summary>Show plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # This step is needed so the workflow appears as unsuccessful in the event of a failed terraform plan
    # We only need this because we used `continue-on-error: true` on the `terraform plan` step
    - name: Check that the plan was successful otherwise throw an error and quit
      if: steps.plan.outcome == 'failure'
      run: exit 1
